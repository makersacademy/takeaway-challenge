##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
# 
# frozen_string_literal: true

module Twilio
  module REST
    class Taskrouter < Domain
      class V1 < Version
        class WorkspaceContext < InstanceContext
          class TaskQueueContext < InstanceContext
            class TaskQueueStatisticsList < ListResource
              ##
              # Initialize the TaskQueueStatisticsList
              # @param [Version] version Version that contains the resource
              # @param [String] workspace_sid The workspace_sid
              # @param [String] task_queue_sid The task_queue_sid
              # @return [TaskQueueStatisticsList] TaskQueueStatisticsList
              def initialize(version, workspace_sid: nil, task_queue_sid: nil)
                super(version)

                # Path Solution
                @solution = {workspace_sid: workspace_sid, task_queue_sid: task_queue_sid}
              end

              ##
              # Provide a user friendly representation
              def to_s
                '#<Twilio.Taskrouter.V1.TaskQueueStatisticsList>'
              end
            end

            class TaskQueueStatisticsPage < Page
              ##
              # Initialize the TaskQueueStatisticsPage
              # @param [Version] version Version that contains the resource
              # @param [Response] response Response from the API
              # @param [Hash] solution Path solution for the resource
              # @return [TaskQueueStatisticsPage] TaskQueueStatisticsPage
              def initialize(version, response, solution)
                super(version, response)

                # Path Solution
                @solution = solution
              end

              ##
              # Build an instance of TaskQueueStatisticsInstance
              # @param [Hash] payload Payload response from the API
              # @return [TaskQueueStatisticsInstance] TaskQueueStatisticsInstance
              def get_instance(payload)
                TaskQueueStatisticsInstance.new(
                    @version,
                    payload,
                    workspace_sid: @solution[:workspace_sid],
                    task_queue_sid: @solution[:task_queue_sid],
                )
              end

              ##
              # Provide a user friendly representation
              def to_s
                '<Twilio.Taskrouter.V1.TaskQueueStatisticsPage>'
              end
            end

            class TaskQueueStatisticsContext < InstanceContext
              ##
              # Initialize the TaskQueueStatisticsContext
              # @param [Version] version Version that contains the resource
              # @param [String] workspace_sid The workspace_sid
              # @param [String] task_queue_sid The task_queue_sid
              # @return [TaskQueueStatisticsContext] TaskQueueStatisticsContext
              def initialize(version, workspace_sid, task_queue_sid)
                super(version)

                # Path Solution
                @solution = {workspace_sid: workspace_sid, task_queue_sid: task_queue_sid, }
                @uri = "/Workspaces/#{@solution[:workspace_sid]}/TaskQueues/#{@solution[:task_queue_sid]}/Statistics"
              end

              ##
              # Fetch a TaskQueueStatisticsInstance
              # @param [Time] end_date Filter cumulative statistics by an end date. This is
              #   helpful for defining a range of statistics to capture. Input is a GMT ISO 8601
              #   Timestamp.
              # @param [String] minutes Filter cumulative statistics by up to 'x' minutes in the
              #   past. This is helpful for statistics for the last 15 minutes, 240 minutes (4
              #   hours), and 480 minutes (8 hours) to see trends. Defaults to 15 minutes.
              # @param [Time] start_date Filter cumulative statistics by a start date. This is
              #   helpful for defining a range of statistics to capture. Input is a GMT ISO 8601
              #   Timestamp.
              # @param [String] task_channel Filter real-time and cumulative statistics by
              #   TaskChannel. Takes in a Unique Name ("voice", "sms", "default", etc.) or a
              #   TaskChannelSid.
              # @param [String] split_by_wait_time A comma separated values for viewing splits
              #   of tasks canceled and accepted above the given threshold in seconds. Ex: "5,30"
              #   would show splits of tasks that were canceled or accepted before or after 5
              #   seconds and respectively, 30 seconds. This is great for showing short abandoned
              #   tasks or tasks that failed to meet your SLA.
              # @return [TaskQueueStatisticsInstance] Fetched TaskQueueStatisticsInstance
              def fetch(end_date: :unset, minutes: :unset, start_date: :unset, task_channel: :unset, split_by_wait_time: :unset)
                params = Twilio::Values.of({
                    'EndDate' => Twilio.serialize_iso8601_datetime(end_date),
                    'Minutes' => minutes,
                    'StartDate' => Twilio.serialize_iso8601_datetime(start_date),
                    'TaskChannel' => task_channel,
                    'SplitByWaitTime' => split_by_wait_time,
                })

                payload = @version.fetch(
                    'GET',
                    @uri,
                    params,
                )

                TaskQueueStatisticsInstance.new(
                    @version,
                    payload,
                    workspace_sid: @solution[:workspace_sid],
                    task_queue_sid: @solution[:task_queue_sid],
                )
              end

              ##
              # Provide a user friendly representation
              def to_s
                context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
                "#<Twilio.Taskrouter.V1.TaskQueueStatisticsContext #{context}>"
              end

              ##
              # Provide a detailed, user friendly representation
              def inspect
                context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
                "#<Twilio.Taskrouter.V1.TaskQueueStatisticsContext #{context}>"
              end
            end

            class TaskQueueStatisticsInstance < InstanceResource
              ##
              # Initialize the TaskQueueStatisticsInstance
              # @param [Version] version Version that contains the resource
              # @param [Hash] payload payload that contains response from Twilio
              # @param [String] workspace_sid The workspace_sid
              # @param [String] task_queue_sid The task_queue_sid
              # @return [TaskQueueStatisticsInstance] TaskQueueStatisticsInstance
              def initialize(version, payload, workspace_sid: nil, task_queue_sid: nil)
                super(version)

                # Marshaled Properties
                @properties = {
                    'account_sid' => payload['account_sid'],
                    'cumulative' => payload['cumulative'],
                    'realtime' => payload['realtime'],
                    'task_queue_sid' => payload['task_queue_sid'],
                    'workspace_sid' => payload['workspace_sid'],
                    'url' => payload['url'],
                }

                # Context
                @instance_context = nil
                @params = {'workspace_sid' => workspace_sid, 'task_queue_sid' => task_queue_sid, }
              end

              ##
              # Generate an instance context for the instance, the context is capable of
              # performing various actions.  All instance actions are proxied to the context
              # @return [TaskQueueStatisticsContext] TaskQueueStatisticsContext for this TaskQueueStatisticsInstance
              def context
                unless @instance_context
                  @instance_context = TaskQueueStatisticsContext.new(
                      @version,
                      @params['workspace_sid'],
                      @params['task_queue_sid'],
                  )
                end
                @instance_context
              end

              ##
              # @return [String] The account_sid
              def account_sid
                @properties['account_sid']
              end

              ##
              # @return [Hash] The cumulative
              def cumulative
                @properties['cumulative']
              end

              ##
              # @return [Hash] The realtime
              def realtime
                @properties['realtime']
              end

              ##
              # @return [String] The task_queue_sid
              def task_queue_sid
                @properties['task_queue_sid']
              end

              ##
              # @return [String] The workspace_sid
              def workspace_sid
                @properties['workspace_sid']
              end

              ##
              # @return [String] The url
              def url
                @properties['url']
              end

              ##
              # Fetch a TaskQueueStatisticsInstance
              # @param [Time] end_date Filter cumulative statistics by an end date. This is
              #   helpful for defining a range of statistics to capture. Input is a GMT ISO 8601
              #   Timestamp.
              # @param [String] minutes Filter cumulative statistics by up to 'x' minutes in the
              #   past. This is helpful for statistics for the last 15 minutes, 240 minutes (4
              #   hours), and 480 minutes (8 hours) to see trends. Defaults to 15 minutes.
              # @param [Time] start_date Filter cumulative statistics by a start date. This is
              #   helpful for defining a range of statistics to capture. Input is a GMT ISO 8601
              #   Timestamp.
              # @param [String] task_channel Filter real-time and cumulative statistics by
              #   TaskChannel. Takes in a Unique Name ("voice", "sms", "default", etc.) or a
              #   TaskChannelSid.
              # @param [String] split_by_wait_time A comma separated values for viewing splits
              #   of tasks canceled and accepted above the given threshold in seconds. Ex: "5,30"
              #   would show splits of tasks that were canceled or accepted before or after 5
              #   seconds and respectively, 30 seconds. This is great for showing short abandoned
              #   tasks or tasks that failed to meet your SLA.
              # @return [TaskQueueStatisticsInstance] Fetched TaskQueueStatisticsInstance
              def fetch(end_date: :unset, minutes: :unset, start_date: :unset, task_channel: :unset, split_by_wait_time: :unset)
                context.fetch(
                    end_date: end_date,
                    minutes: minutes,
                    start_date: start_date,
                    task_channel: task_channel,
                    split_by_wait_time: split_by_wait_time,
                )
              end

              ##
              # Provide a user friendly representation
              def to_s
                values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
                "<Twilio.Taskrouter.V1.TaskQueueStatisticsInstance #{values}>"
              end

              ##
              # Provide a detailed, user friendly representation
              def inspect
                values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
                "<Twilio.Taskrouter.V1.TaskQueueStatisticsInstance #{values}>"
              end
            end
          end
        end
      end
    end
  end
end